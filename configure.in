## Process this file with autoconf to produce a configure script.
# try CFLAGS="$CFLAGS -g -Wall -Wmissing-declarations -Wmissing-prototypes -Werror"
AC_PREREQ(2.60)
AC_INIT(ObexFTP, 0.23, zany@triq.net)
#AC_CONFIG_SRCDIR(src/foo.c)
AM_INIT_AUTOMAKE([dist-bzip2 nostdinc])
AM_CONFIG_HEADER(config.h)

# note: AC_HELP_STRING is deprecated in autoconf 2.59 and later but
# AS_HELP_STRING is not available in autoconf 2.57 or earlier.

AC_CONFIG_MACRO_DIR([m4])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])
#dnl AM_MAINTAINER_MODE

# Checks for programs.
AC_ISC_POSIX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S

# Initialize libtool
AC_PROG_LIBTOOL

# Checks for header files.
AC_HEADER_STDC
AC_HEADER_DIRENT
AC_CHECK_HEADERS([arpa/inet.h errno.h fcntl.h netdb.h netinet/in.h stdlib.h string.h sys/ioctl.h sys/socket.h sys/time.h termios.h unistd.h sys/select.h sys/times.h])

AC_PATH_WIN32

# Checks for libraries.
PKG_CHECK_MODULES(OPENOBEX,openobex)
REQUIRES="openobex"

AM_ICONV
dnl uncomment line below if ICONV is not available
dnl AC_SUBST(LTLIBICONV)
AC_CHECK_HEADERS([langinfo.h])
dnl IRDA_CHECK
BLUETOOTH_CHECK
if test "${bluez_found}" = "yes"; then
	REQUIRES="$REQUIRES bluez"
fi
USB_CHECK
if test "${am_cv_usb_found}" = "yes"; then
	REQUIRES="$REQUIRES libusb"
fi

# check for optional swig rebuild
AC_ARG_ENABLE([swig],
		[AC_HELP_STRING([--enable-swig],
			[Rebuild language bindings @<:@default=no@:>@])],
[case "${enableval}" in
  yes) want_swig_rebuild=true ;;
  no)  want_swig_rebuild=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-swig) ;;
esac],[want_swig_rebuild=false])
AM_CONDITIONAL(ENABLE_SWIG, test x$want_swig_rebuild = xtrue)
if test x$want_swig_rebuild = xtrue; then
	AC_PROG_SWIG(1.3.7) dnl how low can we go?
fi

# check for language bindings
AC_ARG_ENABLE([perl],
              [AC_HELP_STRING([--disable-perl],
                              [Disables perl language bindings @<:@default=auto@:>@])],
              [ac_perl_enabled=$enableval],
              [AC_CHECK_PROG([ac_perl_enabled],[perl],[yes],[no])])

if test "$ac_perl_enabled" = yes; then
	AC_PATH_PROG([PERL], [perl], [])
fi
AM_CONDITIONAL([ENABLE_PERL], [test x"$PERL" != x""])

AC_ARG_ENABLE([python],
              [AC_HELP_STRING([--disable-python],
                              [Disables python language bindings @<:@default=auto@:>@])],
              [ac_python_enabled=$enableval],
              [AC_CHECK_PROG([ac_python_enabled],[python[$PYTHON_VERSION]],[yes],[no])])

if test "$ac_python_enabled" = yes; then
	AM_PATH_PYTHON
fi
AM_CONDITIONAL([ENABLE_PYTHON], [test x"$PYTHON" != x""])

AC_ARG_ENABLE([ruby],
              [AC_HELP_STRING([--disable-ruby],
                              [Disables ruby language bindings @<:@default=auto@:>@])],
              [ac_ruby_enabled=$enableval],
              [AC_CHECK_PROG([ac_ruby_enabled],[ruby],[yes],[no])])

if test "$ac_ruby_enabled" = yes; then
	AC_PATH_PROG([RUBY], [ruby], [])
fi
AM_CONDITIONAL([ENABLE_RUBY], [test x"$RUBY" != x""])

AC_ARG_ENABLE([tcl],
              [AC_HELP_STRING([--enable-tcl],
                              [Enables tcl language bindings @<:@default=off@:>@])],
              [ac_tcl_enabled=$enableval],
              [AC_CHECK_PROG([ac_tcl_enabled],[tclsh],[yes],[no])])

if test "$ac_tcl_enabled" = yes; then
	AC_PATH_PROG([TCLSH], [tclsh], [])
fi
AM_CONDITIONAL([ENABLE_TCL], [test x"$TCLSH" != x""])
	

dnl no need to build docs by default
AC_ARG_ENABLE(builddocs,
	AC_HELP_STRING([--enable-builddocs],
			[Compile documentation @<:@default=no@:>@]),
[case "${enableval}" in
  yes) builddocs=true ;;
  no)  builddocs=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-builddocs) ;;
esac],[builddocs=false])
AM_CONDITIONAL(BUILD_DOCS, test x$builddocs = xtrue)

dnl Check for C99 __func__
AC_TRY_COMPILE([
    #include<stdio.h>],
    [printf(__func__)],,
    [AC_DEFINE(__func__, "", [non-C99 fake support for __func__])])

dnl Turn on all warnings but no debugging when using gcc
if test "$ac_cv_prog_gcc" = "yes"; then
    CFLAGS="$CFLAGS -W -Wundef -Wmissing-declarations -Wmissing-prototypes"
fi
       
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

CFLAGS="$CFLAGS -Wall"

# Project-specific settings
# VERSION="..." already set my AM_INIT_AUTOMAKE above
# libtool uses current:revision:age to produce .c-a.a.r
# http://www.gnu.org/software/libtool/manual.html#Updating-version-info
OBEXFTP_VERSION="3\:0\:3"
MULTICOBEX_VERSION="1\:1\:0"
BFB_VERSION="0\:5\:0"
AC_SUBST(VERSION)
AC_SUBST(OBEXFTP_VERSION)
AC_SUBST(MULTICOBEX_VERSION)
AC_SUBST(BFB_VERSION)
AC_SUBST(REQUIRES)

# should use AC_CONFIG_FILES
AC_OUTPUT([
Makefile
swig/perl/Makefile
swig/perl/Makefile.PL
swig/python/Makefile
swig/python/setup.py
swig/ruby/Makefile
swig/tcl/Makefile
swig/Makefile
examples/Makefile
doc/Makefile
apps/Makefile
bfb/Makefile
multicobex/Makefile
obexftp/Makefile
obexftp.spec
obexftp.pc
])
